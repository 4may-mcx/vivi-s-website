// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  createdTime DateTime @default(now()) @map("created_time")
  updatedTime DateTime @updatedAt @map("updated_time")

  @@map("user")
}

model Workflow {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?

  definition String @db.LongText
  status     String // DRAFT | PUBLISHED

  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?

  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  executions WorkflowExecution[]

  @@unique([name, userId])
}

model WorkflowExecution {
  id            String    @id @default(cuid())
  workflowId    String
  userId        String
  trigger       String
  status        String
  createdTime   DateTime  @default(now())
  startedTime   DateTime?
  completedTime DateTime?

  definition String @db.LongText

  workflow Workflow                 @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  phases   WorkflowExecutionPhase[]
}

model WorkflowExecutionPhase {
  id            String    @id @default(cuid())
  userId        String
  status        String
  number        Int
  node          String    @db.LongText
  name          String
  startedTime   DateTime?
  completedTime DateTime?
  inputs        String?   @db.LongText
  outputs       String?   @db.LongText

  workflowExecutionId String
  workflowExecution   WorkflowExecution      @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  logs                WorkflowExecutionLog[]
}

model WorkflowExecutionLog {
  id        String   @id @default(cuid())
  logLevel  String
  message   String
  timestamp DateTime @default(now())

  executionPhaseId String
  executionPhase   WorkflowExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}
