'use client';

import { GetWorkExecutionWithPhases } from '@/actions/workflows/getWorkExecutionWithPhases';
import { GetWorkflowPhaseDetails } from '@/actions/workflows/getWorkflowPhaseDetails';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { datesToDurationString } from '@/lib/helper';
import { cn } from '@/lib/utils';
import { LogLevel, WorkflowExecutionStatus } from '@/types/workflow';
import { WorkflowExecutionLog } from '@prisma/client';
import { useQuery } from '@tanstack/react-query';
import { formatDistanceToNow } from 'date-fns';
import {
  CalendarIcon,
  CircleDashedIcon,
  Clock,
  ClockIcon,
  Loader2Icon,
  LucideIcon,
  WorkflowIcon,
} from 'lucide-react';
import { ReactNode, useEffect, useState } from 'react';
import { PhaseStatusBadge } from './phase-status-badge';

const ExecutionLabel = ({
  icon: Icon,
  value,
  label,
}: {
  icon: LucideIcon;
  value: ReactNode;
  label: ReactNode;
}) => {
  return (
    <div className="flex items-center justify-between px-4 py-2 text-sm">
      <div className="flex items-center gap-2 text-muted-foreground">
        <Icon size={20} className="stroke-muted-foreground/80" />
        <span>{label}</span>
      </div>
      <div className="flex items-center gap-2 font-semibold capitalize">
        {value}
      </div>
    </div>
  );
};

const ParameterViewer = ({
  title,
  subTitle,
  paramJson,
}: {
  title: string;
  subTitle: string;
  paramJson: string | null;
}) => {
  const params = paramJson ? JSON.parse(paramJson) : undefined;
  return (
    <Card>
      <CardHeader className="rounded-lg rounded-b-none border-b bg-gray-50 py-4">
        <CardTitle className="text-base">{title}</CardTitle>
        <CardDescription className="text-sm text-muted-foreground">
          {subTitle}
        </CardDescription>
      </CardHeader>
      <CardContent className="py-4">
        <div className="flex flex-col gap-2">
          {!params ||
            (Object.keys(params).length === 0 && (
              <p className="text-sm text-muted-foreground">
                No parameters generated by this phase
              </p>
            ))}
          {params &&
            Object.entries(params).map(([key, value]) => (
              <div key={key} className="flex items-center justify-between">
                <p className="flex-1 basis-1/3 text-sm text-muted-foreground">
                  {key}
                </p>
                <Input
                  readOnly
                  className="flex-1 basis-2/3"
                  value={value as string}
                />
              </div>
            ))}
        </div>
      </CardContent>
    </Card>
  );
};

const LogViewer = ({ logs }: { logs?: WorkflowExecutionLog[] }) => {
  if (!logs || logs.length === 0) return null;
  return (
    <Card>
      <CardHeader className="rounded-lg rounded-b-none border-b bg-gray-50 py-4">
        <CardTitle className="text-base">Logs</CardTitle>
        <CardDescription className="text-sm text-muted-foreground">
          Logs generated by the phase
        </CardDescription>
      </CardHeader>
      <CardContent className="p-0">
        <Table>
          <TableHeader className="text-sm text-muted-foreground">
            <TableRow>
              <TableHead>Time</TableHead>
              <TableHead>Level</TableHead>
              <TableHead>Message</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {logs.map((log) => {
              const logLevel = log.logLevel as LogLevel;
              return (
                <TableRow
                  key={log.id}
                  className="text-sm text-muted-foreground"
                >
                  <TableCell
                    className="p-[2px] pl-4 text-xs text-muted-foreground"
                    width={190}
                  >
                    {log.timestamp.toISOString()}
                  </TableCell>
                  <TableCell
                    width={80}
                    className={cn(
                      'p-[3px] pl-4 text-xs font-bold uppercase',
                      logLevel === 'info' && 'text-green-500',
                      logLevel === 'error' && 'text-destructive',
                      logLevel === 'warning' && 'text-yellow-500',
                    )}
                  >
                    {logLevel}
                  </TableCell>
                  <TableCell className="flex-1 p-[3px] pl-4 text-xs">
                    {log.message}
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};

type ExecutionData = Awaited<ReturnType<typeof GetWorkExecutionWithPhases>>;

export const ExecutionViewer = ({
  initialData,
}: {
  initialData: ExecutionData;
}) => {
  const [selectedPhase, setSelectedPhase] = useState<string | null>(null);

  const query = useQuery({
    queryKey: ['execution', initialData?.id],
    initialData,
    queryFn: () => GetWorkExecutionWithPhases(initialData!.id),
    refetchInterval: (q) =>
      q.state.data?.status === WorkflowExecutionStatus.RUNNING ? 1000 : false,
  });

  const phaseDetails = useQuery({
    queryKey: ['phaseDetails', selectedPhase],
    enabled: selectedPhase !== null,
    queryFn: () => GetWorkflowPhaseDetails(selectedPhase!),
  });

  const duration = datesToDurationString(
    query.data?.startedTime,
    query.data?.completedTime,
  );

  const isRunning = query.data?.status === WorkflowExecutionStatus.RUNNING;

  const handlePhaseClick = (phaseId: string) => {
    if (isRunning) return;
    setSelectedPhase(phaseId);
  };

  useEffect(() => {
    const phases = query.data?.phases ?? [];
    if (!isRunning) {
      const phaseToSelect = phases
        .filter((phase) => phase.status !== WorkflowExecutionStatus.PENDING)
        .toSorted(
          (a, b) =>
            (a.startedTime?.getTime() ?? 0) - (b.startedTime?.getTime() ?? 0),
        )[0];

      setSelectedPhase(phaseToSelect.id);
    }
  }, [query.data?.phases, isRunning]);

  return (
    <div className="flex h-full w-full">
      <aside className="flex w-[350px] min-w-[350px] max-w-[350px] flex-grow flex-col overflow-hidden border-r-2">
        <div className="px-2 py-4">
          <ExecutionLabel
            icon={CircleDashedIcon}
            label="Status"
            value={query.data?.status}
          />
          <ExecutionLabel
            icon={CalendarIcon}
            label="Started at"
            value={
              <span className="lowercase">
                {query.data?.startedTime
                  ? formatDistanceToNow(query.data?.startedTime, {
                      addSuffix: true,
                    })
                  : '-'}
              </span>
            }
          />
          <ExecutionLabel
            icon={Clock}
            label="Duration"
            value={
              duration ? (
                duration
              ) : (
                <Loader2Icon className="animate-spin" size={20} />
              )
            }
          />
        </div>
        <Separator />
        <div className="flex items-center justify-center px-2 py-4">
          <div className="flex items-center gap-2 text-muted-foreground">
            <WorkflowIcon size={20} className="stroke-muted-foreground" />
            <span className="font-semibold">Phases</span>
          </div>
        </div>
        <Separator />
        {query.data?.phases.map((phase, index) => (
          <Button
            key={phase.id}
            variant={selectedPhase === phase.id ? 'secondary' : 'ghost'}
            onClick={() => handlePhaseClick(phase.id)}
            className={cn(
              'w-full justify-between rounded-none',
              isRunning && 'cursor-not-allowed',
            )}
          >
            <div className="flex items-center gap-2">
              <Badge variant="outline">{index + 1}</Badge>
              <p className="font-semibold">{phase.name}</p>
            </div>
            <PhaseStatusBadge
              status={phase.status as WorkflowExecutionStatus}
            />
          </Button>
        ))}
      </aside>
      <div className="flex h-full w-full">
        {isRunning && (
          <div className="flex h-full w-full flex-col items-center justify-center gap-2">
            <Loader2Icon className="animate-spin" size={40} />
          </div>
        )}
        {!isRunning && !selectedPhase && (
          <div className="flex h-full w-full flex-col items-center justify-center gap-2">
            <p className="font-bold">Select a phase to view its details</p>
          </div>
        )}
        {!isRunning && selectedPhase && phaseDetails.data && (
          <div className="container flex flex-col gap-4 overflow-auto py-4">
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="space-x-4 py-1">
                <div className="flex items-center gap-1">
                  <ClockIcon size={18} className="stroke-muted-foreground" />
                  <span>
                    {datesToDurationString(
                      phaseDetails.data.startedTime,
                      phaseDetails.data.completedTime,
                    ) ?? '-'}
                  </span>
                </div>
              </Badge>
            </div>
            <ParameterViewer
              title="Inputs"
              subTitle="Inputs used to run the phase"
              paramJson={phaseDetails.data.inputs}
            />
            <ParameterViewer
              title="Outputs"
              subTitle="Outputs generated by the phase"
              paramJson={phaseDetails.data.outputs}
            />
            <LogViewer logs={phaseDetails.data.logs} />
          </div>
        )}
      </div>
    </div>
  );
};
